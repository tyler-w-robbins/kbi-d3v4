<div class="viz">
  <svg width="1200" height="700"></svg>
</div>

<script>
  // draw graph for query1 when query1 button is clicked
  //$('#query1').click(function() {
    var jsonUrl = '/data/query1_graph.json';

    var margin = {top: 20, right: 90, bottom: 30, left: 90},
        width = 660 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var svg = d3.select("svg"),
      width = +svg.attr("width"),
      height = +svg.attr("height"),
      g = svg.append("g")
      .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    //  TODO: change to heatmap coloring later
    var color = d3.scaleOrdinal(d3.schemeCategory20);

    // initializes force simulation and saves to var simulation
    var simulation = d3.forceSimulation()
      .force("link", d3.forceLink().id(function(d) {
        return d.id;
      }))
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(width / 2, height / 2));

    // load JSON data into d3 scope
    d3.json(jsonUrl, function(error, graph) {
      if (error) throw error;


    var link = svg.append("g")
        .attr("class", "links")
      .selectAll("line")
      .data(graph.edges)
      .enter().append("line")
      // .attr('d',arc)
        .attr("stroke-width", function(d) { return Math.sqrt(d.weight); });



        var node = g.selectAll(".node")
            .data(graph.nodes)
          .enter().append("g")
            .attr("class", function(d) {
              return "node" +
                (d.children ? " node--internal" : " node--leaf"); })
            // .attr("transform", function(d) {
            //   return "translate(" + d.y + "," + d.x + ")"; })
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

          node.append("path")
  .style("stroke", function(d) { return "grey"; })
  .style("fill", function(d) { return "green"; })
  .attr("d", d3.symbol()
     .size(function(d) { return d.size * 35; } )
     .type(function(d) { return d3.symbols[d.shape];}));

      simulation
        .nodes(graph.nodes)
        .on("tick", ticked);

      simulation.force("link") // SUSPICIOUS!
        .links(graph.edges); // set force-directed graph links to graph.edges

    function ticked() {
      link
          .attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node
          .attr("transform", function(d) { return "translate(" + (d.x-90) + "," + (d.y-20) + ")"; });
    }
  });

    // drag event handlers for nodes
    function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  //});
</script>
