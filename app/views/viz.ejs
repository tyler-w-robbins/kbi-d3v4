<div class="viz">
  <svg width="1200" height="700"></svg>
</div>
<script>
  var searchTermSuggestions = ["alzheimer's", "alzheimer's disease", "alzheimer", "alzheimer disease", "alzheimer s", "alzheimers", "alzheimers disease", "alzheimer s disease", "alzheimer's disease review", "alzheimer review", "alzheimer's disease treatment", "therapy alzheimer", "biomarkers alzheimer's", "onset alzheimer's", "focal onset alzheimer's", "treatment alzheimer's", "tau alzheimer", "stress alzheimer's", "therapy alzheimer's", "oil alzheimers", "alzheimer disease review", "blueberries", "blueberries and memory", "blueberries cardiovascular", "blueberries and inflammation", "blueberries cancer", "blueberries health", "blueberries alzheimer's", "blueberries and blood pressure", "blueberries memory", "wild blueberries", "blueberries antioxidant", "blueberries brain", "anthocyanins blueberries", "blueberries cognition", "blueberries inflammation", "blueberries insulin", "blueberries aging", "blueberries and cancer", "blueberries and diabetes", "blueberries and health", "vaccinium", "vaccinium myrtillus", "vaccinium macrocarpon", "vaccinium corymbosum", "vaccinium myrtillus diabetes", "vaccinium vitis", "vaccinium vitis idaea", "vaccinium macrocarpon cranberry", "vaccinium myrtillus eye", "vaccinium vitis-idaea", "vaccinium angustifolium", "vaccinium macrocarpon cranberry urinary", "vaccinium macrocarpon urinary", "vaccinium macrocarpon or cranberry and urinary tract infections", "vaccinium meridionale", "vaccinium myrtillus anthocyanosides", "vaccinium uliginosum", "vaccinium myrtillus review", "vaccinium myrtillus extract", "vaccinium myrtillus leaf"];
  $( "#inputA" ).autocomplete({
    source: searchTermSuggestions
  });
  $( "#inputB" ).autocomplete({
    source: searchTermSuggestions
  });
  // draw graph for query1 when query button is clicked
//  $('#queryGraph').click(function () {

    var jsonUrl = '/data/query1_graph.json';

    var margin = {
        top: 20,
        right: 90,
        bottom: 30,
        left: 90
      },

      width = 660 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

    var svg = d3.select("svg"),
      width = +svg.attr("width"),
      height = +svg.attr("height"),
      g = svg.append("g")
      .attr("transform",
        "translate(" + margin.left + "," + margin.top + ")");

    svg.append("defs").selectAll("marker")
      .data(["end"])
      .enter().append("marker")
      .attr("id", function(d) {
        return d;
      })
      .attr("viewBox", "0 -5 10 10")
      .attr("refX", 11.5)
      .attr("refY", 0)
      .attr("fill", "none")
      .attr("stroke", "#aaa")
      .attr("stroke-width", 2)
      .attr("markerWidth", 2)
      .attr("markerHeight", 2)
      .attr("orient", "auto")
      .append("path")
      .attr("d", "M0,-5L10,0L0,5");

    var heatcolor = d3.scaleLinear()
      .domain([0, 8, 16])
      .range(['#f89734', '#f7f7f7', '#1f6938']);

    //  TODO: change to heatmap coloring later
    var color = d3.scaleOrdinal(d3.schemeCategory20);

    // initializes force simulation and saves to var simulation
    var simulation = d3.forceSimulation()
      .force("link", d3.forceLink().distance(200).id(function(d) {
        return d.id;
      }))
      .force("charge", d3.forceManyBody().strength(-500))
      // .force("center", d3.forceY((height / 2)))
      .force("x", d3.forceX(function(d) {
        return (d.shape * 250 + 100);
      }).strength(0.9))
      .force("y", d3.forceY(height / 2).strength(0.1));

    // load JSON data into d3 scope
    d3.json(jsonUrl, function(error, graph) {
      if (error) throw error;

      var node = g.selectAll(".node")
        .data(graph.nodes)
        .enter().append("g")
        .attr("class", function(d) {
          return "node" +
            (d.children ? " node--internal" : " node--leaf");
        })
        // .attr("transform", function(d) {
        //   return "translate(" + d.y + "," + d.x + ")"; })
        .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

      node.append("path")
        .style("stroke", function(d) {
          return "grey";
        })

      .style("fill", function(d, i) {
          return heatcolor(i);
        })
        .attr("d", d3.symbol()
          .size(function(d) {
            return d.size * 50;
          })
          .type(function(d) {
            return d3.symbols[d.shape];
          }));

      node.append("text")
        .attr("y", function(d) {
          return (d.size * 3) || 15;
        })
        .attr("dy", ".35em")
        .style("fill", "black")
        .text(function(d) {
          return d.text;
        });

      var link = svg.append("g")
        .attr("class", "links")
        .attr("marker-end", "url(#end)")
        .selectAll("line")
        .data(graph.edges)
        .enter().append("line")
        // .attr('d',arc)
        .attr("stroke-width", function(d) {
          return d.weight;
        });

      simulation
        .nodes(graph.nodes)
        .on("tick", ticked);

      simulation.force("link") // SUSPICIOUS!
        .links(graph.edges); // set force-directed graph links to graph.edges

      function ticked() {
        link
          .attr("x1", function(d) {
            return d.source.x + 10;
          })
          .attr("y1", function(d) {
            return d.source.y;
          })
          .attr("x2", function(d) {
            return d.target.x - 10;
          })
          .attr("y2", function(d) {
            return d.target.y;
          });

        node
          .attr("transform", function(d) {
            return "translate(" + (d.x - 90) + "," + (d.y - 20) + ")";
          });
      }
    });

    // drag event handlers for nodes
    function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
//  });
</script>
